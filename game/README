# Sub-directories
## utils/
Utilities that are not part of the game itself.  The testing framework
for example.

## data/
Data used in the game.  All programs change directory to this
directory on startup.

## object/
Source code that is not directoy linked to an executable.  Mostly a
collection of objects in header files.

## src/
All source code that results in executables.  This includes Python
code which is itself executable.

## tests/
Input and output files for tests.  Much of these are for the
input-file-based testing framework in utils/

# Overall Architecture
The game was originally going to be two games, where one was a subgame
of the other.  However, over time, focus shifted to the subgame.  The
supergame (overworld), is currently just a launcher for the subgame
(underworld).

All the game code is based on line-length human-readable string
messages.  There is a large number of different message mini-formats
for comunicating with the various modules.

# Underworld Game Design
There is a one-to-one correspondence between a given objects in the
game and which client controls its state.  This is usually the client
that created it, but there is an exception for the player objects
which are initially created by the referee client (but are later taken
over by the players they represent).

Every client maintains two state objects.  One with the state of all
the objects it controls, and another that has everyones objects.  Lets
call the former the 'local' state and latter the 'global' state.
There is much more imformation stored in the local state, velocity and
health are examples.

The local and global states are *not* in sync.  The local object is
kept up to date based on the number of milliseconds since the game
started, and state-change messages are generated indicating the
changes that have been made.  The global object is only updated once
everyone has send all of their state-change messages for a certain
time-slice.

However, the code to update the local state needs to examine the
(out-of-sync) global state to determine how it interacts with the rest
of the world.  This is a little complicated, and it causes the
behavior of the game to be slightly effected by lag.  Still, this
doesn't seem to be a big problem in practice.

# Message formats
## State/Interpreter
The game state is designed to behave like a
map<string,map<string,string>>.  This is so you can have commands like

    /set player-ben x 8
    /set global wind -0.33

This way the interpreter doesn't need to know hardly anything about
the implementation of the state.  The individual state objects
implement a set(attribute, value) method, and the interpreter can just
call it.

    object["player-ben"].set("x", "8")
    object["global"].set("wind", "-0.33")
    cerr << object.global.wind;

### Commands
- /new object type x y
- /delete object
- /set object property value
- /query object property
- /explode x y radius
- /move id x y
- /map filename

### Properties
All objects have these properties:

- x
- y
- type -- The name of the sprite used to render the object

### The 'global' Object
There is a special object 'global' (type 'global') which has the
following additional properties:

- wind
- gravity
- mapname
- map

## Renderer
- flip # update the screen
- white # white-out the screen

### Loading data files
- image id filename
- sound id filename

### Play/draw data-files
- play id
- draw id x y
- draw-center id x y

### Drawing primitives
- arrow red green blue x0 y0 x1 y1
- line width red green blue x0 y0 x1 y1
- circle radius red green blue x0 y0
- rect red green blue alpha x0 y0 x1 y1

## Keys
There are too many to list, however we use SDL_GetKeyName plus a
couple of specials ones:

- leftmousebutton
- rightmousebutton
- mouse x y
- a
- control a

You can run ./keylistener and type keys into the blank window to see
their names.

# Connecting to the Switchbox
None of our programs know about the switchbox at all.  We just use
stdin and stdout to send messages.  Then we tie these programs to
'switchbox-connect' or 'switchbox-cat' with pipes.  To tie both stdin
and stdout of two programs together we use 'sixty-nine'.  For example:

    ./switchbox.sh start 5555
    ./sixty-nine './keylistener' './switchbox-cat localhost 5555'

# Maps
Maps consist of a set of spawn points (x, y), and an 800x600 image.
Here is an example file:

    spawn 0 0
    spawn 100 100
    map foo.png
