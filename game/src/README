This directory contains the game and a bunch of small programs that
use various internal libraries.  This provieds a set of entry points
for manually testing code, and serves as light ad-hock documentation
for the libraries themselves.  Most of this code is very simple and
readable (game.cpp is *not*).

Most of these utilities take their input from stdin and output to
stdout so you can set up automatic testing very easily by recording a
manual testing session (with the unix command 'tee') to two files, and
then replaying the session back to see if the results match.  For
example:

    $ tee input | ./delayed_cat | tee output
    hi
    there
    1
    2
    3
    done
    ^D
    $ ./delayed_cat < input > test_output
    $ diff output test_output
    $ rm output input test_output

# Testing
There are a couple of utillities for running tests utils/.  ./test and
./run-tests.  ./run-tests uses the file test_data/tests to get a list
of programs to test, then calls ./test on all of them, ./test runs
test_data/$program_in and compares the output to
test_data/$program_out.  Some of the programs tested don't have any
output.  The point of theses is to make sure the program doesn't fail
with the given output, or for the test-runner to manually verify the
on-screen output (render).  This is all run if you do 'make check' in
or above this directory.

# Running
To run the game do:

   xterm1> ./overworld-launcher.py $username1
   xterm2> ./overworld-launcher.py $username2 localhost
   xterm3> ./overworld-launcher.py $username3 localhost

Then, in one of the windows, select all three players and push the
play button.
